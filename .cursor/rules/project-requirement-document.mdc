---
description:
globs:
alwaysApply: true
---

- Overview

Build a multi-step loan application form with complex validation, accessibility, and testing. The form simulates a real-world banking use case and demonstrates skills in React, TypeScript, validation, accessibility, testing, and maintainable code quality.

The output should be a professional-grade web app that can be shared as a code sample and demo link.

- Goals & Non-Goals

\*\* Goals

Create a 3-step loan application form.
Ensure real-time field validation and error handling.
Ensure accessibility compliance (ARIA, focus management, keyboard navigation).
Write unit and integration tests.
Deploy to a shareable platform (Netlify, Vercel, or GitHub Pages).

\*\* Non-Goals

No real backend integration (mock API only).
No user authentication system.
No advanced state management library (Redux) unless strictly needed.

- User Stories

As a user, I want to enter my personal details so that I can start the loan application.
As a user, I want to enter my financial details so that I can provide income and loan requirements.
As a user, I want to see validation errors immediately so I can fix mistakes.
As a user, I want the form to be accessible so that I can use it with screen readers or only with a keyboard.
As a user, I want to review my information before submitting.
As a user, I want to see a confirmation message after submitting.

\*\* Functional Requirements

Step 1 – Personal Info

Full Name (required, min 3 chars)
Email (required, valid format)
Phone Number (required, numeric, 10–15 digits)

Step 2 – Financial Info

Annual Income (required, number > 0)
Loan Amount (required, number > 0, must be ≤ Annual Income × 5)
Employment Status (dropdown: Full-time, Part-time, Self-employed, Unemployed, Student)

Step 3 – Review & Confirmation

Display entered data in a summary view.
Checkbox: “I confirm the above information is correct” (required to enable submit).
Submit button triggers mock API (setTimeout for success).

- Non-Functional Requirements

\*\* Accessibility:

Use semantic HTML.
Labels linked to inputs.
Error messages with aria-live="polite".
Full keyboard navigation support.

\*\* Performance:

Fast load.
Efficient rendering (React best practices, memoization if needed).
Maintainability:
Clean folder structure.
TypeScript interfaces for form data.
Reusable form components.

\*\* Technical Requirements

Framework: React (with Vite or CRA)
Language: TypeScript
Styling: CSS Modules (or Tailwind if faster) + salt-ds (https://www.saltdesignsystem.com/salt/index) strict requirement
Form Handling: React Hook Form (preferred) or custom validation

- Pages
  ✅ /loans --> list of loans (home entry point of the app)
  ✅ /loan --> a single loan
  ✅ /loan/create --> create a single loan (3 step form)
  ✅ /loan/edit/id --> edit a single loan (3 step form)

- Success Criteria

✅ User can complete all 3 steps without errors.
✅ Validation works in real time and blocks progression on invalid data.
✅ Application is accessible (tested with keyboard and Lighthouse).
✅ Unit & integration tests pass with at least 80% coverage.
✅ README includes setup, design decisions, and improvements.
✅ Live demo deployed successfully.
